# importing all the libraries 
import pandas as pd 
import numpy as np 
import time 

# importing spacy and its libraries 
import spacy 
from spacy import displacy
from collections import Counter
import en_core_web_md

import json 
import itertools
pd.set_option('display.max_colwidth', None)
import pprint 
import requests

# sentiment analysis library
import xgboost as xgb
import textblob 
from textblob import TextBlob

# plotting graphs library
import matplotlib.pyplot as plt

import nltk 
import nltk.corpus
from nltk import sent_tokenize, word_tokenize
from nltk.stem.snowball import SnowballStemmer
from nltk.stem.wordnet import WordNetLemmatizer
from nltk.corpus import stopwords
from nltk.sentiment import SentimentIntensityAnalyzer
from datetime import datetime, timedelta

import finnhub
import xgboost
from datetime import datetime
import datetime as dt
from datetime import timedelta
import dateutil.relativedelta

# creating the function for finnews
@st.cache(suppress_st_warning=True)
def finnews(from_time, to_time, topic):
    api_key = 'cbcgogiad3ib4g5ulrb0'
    sandbox_key = 'sandbox_cbcgogiad3ib4g5ulrbg'
    finnhub_client = finnhub.Client(api_key=api_key)
    response = finnhub_client.company_news(topic, _from=from_time, to=to_time)
    response_str = ' '.join(map(str, response))

    title_list = []
    date_list = []
    desc_list = []
    sent_list = []
    date_real_list = []
    # sentiment will be checked with the title and the spacy library will be run on the summary

    for i in response:
        title = list(i.values())[2]
        timestamp = list(i.values())[1]
        summ = list(i.values())[7]
        sent = TextBlob(title).sentiment.polarity
        title_list.append(title)
        date_list.append(timestamp)
        desc_list.append(summ)
        sent_list.append(sent)

    for j in date_list:
        dty_obj = dt.datetime.fromtimestamp(j).strftime('%d-%m-%y')
        date_real_list.append(dty_obj)

    df_y = pd.DataFrame()
    df_y['Title'] = title_list
    df_y['Summary'] = desc_list
    df_y['Sentiment'] = sent_list
    df_y['date'] = date_real_list

    return df_y

    # filtering the dfs into sentiment by date and setting them into another df for graphing
    title_date_sent = df_y.groupby('date')['Sentiment'].mean()
    st.dataframe(title_date_sent)
